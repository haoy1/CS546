
import os
import psycopg2
import psycopg2.extras
import tabulate
from H_Table import H
import collections
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)

    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    sales = cur.fetchall()
        
    mf_structure = collections.defaultdict(H) 

    _global = []
    for row in sales:
        sales_cust = row[0]
        if row[5] == 'NY' and row[6] >= 10:
            if not (mf_structure[(sales_cust)]['cust']):
                mf_structure[(sales_cust)]['cust'] = sales_cust
            mf_structure[(sales_cust)]['1_sum_quant'] += row[6]
            if '1_avg_quant_sum' not in mf_structure[(sales_cust)]:
                mf_structure[(sales_cust)]['1_avg_quant_sum'] = 0
                mf_structure[(sales_cust)]['1_avg_quant_count'] = 0
            mf_structure[(sales_cust)]['1_avg_quant_sum'] += row[6]
            mf_structure[(sales_cust)]['1_avg_quant_count'] += 1
        if row[5] == 'NJ':
            if not (mf_structure[(sales_cust)]['cust']):
                mf_structure[(sales_cust)]['cust'] = sales_cust
            mf_structure[(sales_cust)]['2_sum_quant'] += row[6]
        if row[5] == 'CT':
            if not (mf_structure[(sales_cust)]['cust']):
                mf_structure[(sales_cust)]['cust'] = sales_cust
            mf_structure[(sales_cust)]['3_sum_quant'] += row[6]
            if '3_avg_quant_sum' not in mf_structure[(sales_cust)]:
                mf_structure[(sales_cust)]['3_avg_quant_sum'] = 0
                mf_structure[(sales_cust)]['3_avg_quant_count'] = 0
            mf_structure[(sales_cust)]['3_avg_quant_sum'] += row[6]
            mf_structure[(sales_cust)]['3_avg_quant_count'] += 1
    print(mf_structure)

    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")


def main():
    print(query())


if "__main__" == __name__:
    main()
    