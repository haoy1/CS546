import subprocess


def main():
    
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """
    S = []
    N = []
    V = []
    F = []
    SIGMA = []
    G = []

    with open('input1.txt', 'r') as file:
    # Read lines from the file
        for line in file:
            # Split each line at the colon
            parts = line.strip().split(':')
            if len(parts) == 2:
                # Extract key and value
                key = parts[0].strip()
                value = parts[1].strip().split(',')

                # Assign value to corresponding variable
                if key == "SELECT ATTRIBUTE(S)":
                    S = value
                elif key == "NUMBER OF GROUPING VARIABLES(n)":
                    N = value
                elif key == "GROUPING ATTRIBUTES(V)":
                    V = value
                elif key == "F-VECT([F])":
                    F = value
                elif key == "SELECT CONDITION-VECT([SIGMA])":
                    SIGMA = value
                elif key == "HAVING_CONDITION(G)":
                    G = value

    print("S:", S)
    print("N:", N)
    print("V:", V)
    print("F:", F)
    print("SIGMA:", SIGMA)
    print("G:", G)

    #应该要把这个弄到生成的文件里
    class H:
        attributes = S
        number_of_grouping_variables = int(N[0])
        grouping_attributes = V
        f_vect = F
        select_condition = SIGMA
        having_condition = G

    body = """
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')
    
    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    #cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
